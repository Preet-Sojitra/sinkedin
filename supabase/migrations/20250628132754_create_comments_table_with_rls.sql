-- public.comments table
CREATE TABLE public.comments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  post_id BIGINT NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  body TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),

  -- Constraint to ensure comments are not empty
  CONSTRAINT body_length CHECK (char_length(body) > 0)
);

-- Comments for clarity
COMMENT ON TABLE public.comments IS 'Stores user comments on posts.';
COMMENT ON COLUMN public.comments.post_id IS 'The post the comment belongs to.';
COMMENT ON COLUMN public.comments.user_id IS 'The user who wrote the comment.';

--
-- RLS POLICIES FOR 'comments' TABLE
--

-- 1. Enable RLS on the table
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;

-- 2. Create policy for SELECT (reading comments)
CREATE POLICY "Comments are viewable by everyone."
  ON public.comments FOR SELECT
  USING (true);

-- 3. Create policy for INSERT (creating comments)
CREATE POLICY "Users can create their own comments."
  ON public.comments FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- 4. Create policy for UPDATE (editing comments)
CREATE POLICY "Users can update their own comments."
  ON public.comments FOR UPDATE
  USING (auth.uid() = user_id);

-- 5. Create policy for DELETE (deleting comments)
CREATE POLICY "Users can delete their own comments."
  ON public.comments FOR DELETE
  USING (auth.uid() = user_id);